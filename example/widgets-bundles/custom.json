{
  "widgetsBundle": {
    "alias": "custom",
    "title": "Custom",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "configme",
      "name": "ConfigMe",
      "descriptor": {
        "type": "rpc",
        "sizeX": 4,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<div class=\"tb-rpc-button\" fxLayout=\"column\">\n    <div fxFlex=\"20\" class=\"title-container\" fxLayout=\"row\"\n        fxLayoutAlign=\"center center\" [fxShow]=\"showTitle\">\n        <span class=\"button-title\">{{title}}</span>\n    </div>\n    <div fxFlex=\"{{showTitle ? 80 : 100}}\" [ngStyle]=\"{paddingTop: showTitle ? '5px': '10px'}\"\n        class=\"button-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <div>\n            <button mat-button (click)=\"sendUpdate()\"\n                    [class.mat-raised-button]=\"styleButton?.isRaised\"\n                    [color]=\"styleButton?.isPrimary ? 'primary' : ''\"\n                    [ngStyle]=\"customStyle\">\n                {{buttonLable}}\n            </button>\n        </div>\n    </div>\n    <div class=\"error-container\" [ngStyle]=\"{'background': error?.length ? 'rgba(255,255,255,0.25)' : 'none'}\"\n         fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <span class=\"button-error\">{{ error }}</span>\n    </div>\n</div>",
        "templateCss": ".tb-rpc-button {\n    width: 100%;\n    height: 100%;\n}\n\n.tb-rpc-button .title-container {\n    font-weight: 500;\n    white-space: nowrap;\n    margin: 10px 0;\n}\n\n.tb-rpc-button .button-container div{\n    min-width: 80%\n}\n\n.tb-rpc-button .button-container .mat-button{\n    width: 100%;\n    margin: 0;\n}\n\n.tb-rpc-button .error-container {\n    position: absolute;\n    top: 2%;\n    right: 0;\n    left: 0;\n    z-index: 4;\n    height: 14px;\n}\n\n.tb-rpc-button .error-container .button-error {\n    color: #ff3315;\n    white-space: nowrap;\n}",
        "controllerScript": "self.onInit = function() {\n    self.ctx.ngZone.run(function() {\n       init(); \n       self.ctx.detectChanges();\n    });\n};\n\nfunction init() {\n    self.ctx.$scope.buttonLable = self.ctx.settings.buttonText;\n    self.ctx.$scope.showTitle = self.ctx.settings.title &&\n        self.ctx.settings.title.length ? true : false;\n    self.ctx.$scope.title = self.ctx.settings.title;\n    self.ctx.$scope.styleButton = self.ctx.settings.styleButton;\n    let entityAttributeType = self.ctx.settings.entityAttributeType;\n    let entityParameters = JSON.parse(self.ctx.settings.entityParameters);\n    let selectorDiv = null;\n\n    if (self.ctx.settings.styleButton.isPrimary ===\n        false) {\n        self.ctx.$scope.customStyle = {\n            'background-color': self.ctx.$scope.styleButton\n                .bgColor,\n            'color': self.ctx.$scope.styleButton.textColor\n        };\n    }\n\n    let attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n    \n    const defaultSensors = [\n        {\n            name: \"Light\",\n            isSelected: false\n        },\n        {\n            name: \"Accelerometer\",\n            isSelected: false\n        },\n        {\n            name: \"Gyroscope\",\n            isSelected: false\n        },\n        {\n            name: \"Humidity\",\n            isSelected: false\n        },\n        {\n            name: \"Air Pressure\",\n            isSelected: false\n        },\n        {\n            name: \"Temperature\",\n            isSelected: false\n        },\n        {\n            name: \"Gas\",\n            isSelected: false\n        },\n        {\n            name: \"Battery\",\n            isSelected: false\n        },\n        {\n            name: \"SNR\",\n            isSelected: false\n        },\n        {\n            name: \"GPS\",\n            isSelected: false\n        }\n        ];\n    let sensors = null;\n    const loadSensors = function(){\n        if(!sensors){\n            const tempData = JSON.parse(window.localStorage.getItem(\"sensorsData\"));\n            if(tempData){\n                sensors = tempData;\n            }else{\n                sensors = defaultSensors\n            }\n        }\n        \n        return sensors\n    }\n        \n    const computeChannel = function(){\n        window.localStorage.setItem(\"sensorsData\", JSON.stringify(sensors));\n        \n        const bits = [\n            Number(sensors[0].isSelected),\n            1,\n            Number(sensors[1].isSelected),\n            Number(sensors[2].isSelected),\n            1,\n            Number(sensors[3].isSelected),\n            Number(sensors[4].isSelected),\n            Number(sensors[5].isSelected),\n            Number(sensors[6].isSelected),\n            0,\n            Number(sensors[7].isSelected),\n            Number(sensors[8].isSelected),\n            Number(sensors[9].isSelected)\n            ];\n        return parseInt(bits.join(\"\"), 2).toString();\n    }\n    \n    const onSelectItem = function(event){\n        sensors[event.target.id].isSelected = event.target.checked;\n    }\n    \n    const selector = function(callback){\n        selectorDiv = document.createElement(\"div\");\n        selectorDiv.style.position = \"absolute\";\n        selectorDiv.style.width = \"100vw\";\n        selectorDiv.style.height = \"100vh\";\n        selectorDiv.style.top = 0;\n        selectorDiv.style.left = 0;\n        selectorDiv.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\";\n        selectorDiv.style.zIndex = 10000;\n        selectorDiv.style.display = \"flex\";\n        selectorDiv.style.justifyContent = \"center\";\n        selectorDiv.style.alignItems = \"center\";\n        \n        const container = document.createElement(\"div\");\n        container.style.paddingLeft = \"2rem\";\n        container.style.paddingRight = \"2rem\";\n        container.style.paddingBottom = \"2rem\";\n        container.style.paddingTop = \"1rem\";\n        container.style.borderRadius = \"16px\";\n        container.style.display = \"flex\";\n        container.style.flexDirection = \"column\";\n        container.style.backgroundColor = \"white\";\n        container.style.boxShadow = \"0px 10px 50px rgba(0,0,0,0.3)\";\n        \n        const allPanels = document.createElement(\"div\");\n        allPanels.style.display = \"flex\";\n        allPanels.style.flexDirection = \"row\";\n        allPanels.style.columnGap = \"80px\";\n        container.appendChild(allPanels);\n        \n        // channePanel =========================================================\n        const channePanel = document.createElement(\"div\");\n        allPanels.appendChild(channePanel);\n        \n        const title = document.createElement(\"h5\");\n        title.innerText = \"Select Sensor\";\n        title.style.marginBottom = \"1rem\";\n        channePanel.appendChild(title);\n        \n        let i = 0;\n        for(i = 0; i < sensors.length; i++){\n            let itemDiv = document.createElement(\"div\");\n            itemDiv.style.marginBottom = \"0.5rem\";\n            \n            let itemElement = document.createElement(\"input\");\n            itemElement.type = \"checkbox\";\n            itemElement.id = i;\n            itemElement.checked = sensors[i].isSelected;\n            itemElement.onchange = onSelectItem;\n            itemDiv.appendChild(itemElement);\n            \n            let itemLabel = document.createElement(\"label\");\n            itemLabel.style.marginLeft = \"0.5rem\";\n            itemLabel.for = i;\n            itemLabel.innerText = sensors[i].name\n            itemDiv.appendChild(itemLabel);\n            \n            channePanel.appendChild(itemDiv)\n        }\n        // channePanel =========================================================\n        \n        const rightPanel = document.createElement(\"div\");\n        allPanels.appendChild(rightPanel);\n        \n        // bulkPanel ===========================================================\n        const bulkPanel = document.createElement(\"div\");\n        bulkPanel.style.marginBottom = \"1.5rem\";\n        rightPanel.appendChild(bulkPanel);\n        \n        const bulkPanelTitle = document.createElement(\"h5\");\n        bulkPanelTitle.innerText = \"Bulk Upload\";\n        bulkPanelTitle.style.marginBottom = \"1rem\";\n        bulkPanel.appendChild(bulkPanelTitle);\n        \n        const bulkCheckbox = document.createElement(\"input\");\n        bulkCheckbox.type = \"checkbox\";\n        bulkCheckbox.id = \"bulkCheckbox\";\n        bulkCheckbox.checked = window.localStorage.getItem(\"bulk_upload\") === \"true\" ? true : false;\n        bulkCheckbox.onchange = function(event){\n            window.localStorage.setItem(\"bulk_upload\", event.target.checked);\n        };\n        bulkPanel.appendChild(bulkCheckbox);\n        \n        const bulkCheckboxLabel = document.createElement(\"label\");\n        bulkCheckboxLabel.style.marginLeft = \"0.5rem\";\n        bulkCheckboxLabel.for = \"bulkCheckbox\";\n        bulkCheckboxLabel.innerText = \"Bulk Upload\";\n        bulkPanel.appendChild(bulkCheckboxLabel);\n        // bulkPanel ===========================================================\n        \n        // upload period =======================================================\n        const periodPanel = document.createElement(\"div\");\n        periodPanel.style.marginBottom = \"1.5rem\";\n        rightPanel.appendChild(periodPanel);\n        \n        const periodPanelTitle = document.createElement(\"h5\");\n        periodPanelTitle.innerText = \"Upload Period\";\n        periodPanelTitle.style.marginBottom = \"1rem\";\n        periodPanel.appendChild(periodPanelTitle);\n        \n        const periodFrom = document.createElement(\"input\");\n        periodFrom.type = \"number\";\n        periodFrom.min = 10;\n        periodFrom.max = 1000;\n        periodFrom.value = window.localStorage.getItem(\"upload_period\")\n        periodFrom.oninput = function(event){\n            window.localStorage.setItem(\"upload_period\", event.target.value);\n        }\n        periodPanel.appendChild(periodFrom);\n        // upload period =======================================================\n        \n        // bulk upload sampling cnt ============================================\n        const cntPanel = document.createElement(\"div\");\n        cntPanel.style.marginBottom = \"1.5rem\";\n        rightPanel.appendChild(cntPanel);\n        \n        const cntPanelTitle = document.createElement(\"h5\");\n        cntPanelTitle.innerText = \"Bulk Upload Sampling CNT\";\n        cntPanelTitle.style.marginBottom = \"1rem\";\n        cntPanel.appendChild(cntPanelTitle);\n        \n        const cnt = document.createElement(\"input\");\n        cnt.type = \"number\";\n        cnt.min = 2;\n        cnt.max = 120;\n        cnt.value = window.localStorage.getItem(\"bulk_upload_sampling_cnt\")\n        cnt.oninput = function(event){\n            window.localStorage.setItem(\"bulk_upload_sampling_cnt\", event.target.value);\n        }\n        cntPanel.appendChild(cnt);\n        // bulk upload sampling cnt ============================================\n        \n        // bulk upload sampling frequence ======================================\n        const frequencePanel = document.createElement(\"div\");\n        frequencePanel.style.marginBottom = \"1.5rem\";\n        rightPanel.appendChild(frequencePanel);\n        \n        const frequencePanelTitle = document.createElement(\"h5\");\n        frequencePanelTitle.innerText = \"Bulk Upload Sampling Frequence\";\n        frequencePanelTitle.style.marginBottom = \"1rem\";\n        frequencePanel.appendChild(frequencePanelTitle);\n        \n        const frequence = document.createElement(\"input\");\n        frequence.type = \"number\";\n        frequence.min = 10;\n        frequence.max = 1000;\n        frequence.value = window.localStorage.getItem(\"bulk_upload_sampling_freq\")\n        frequence.oninput = function(event){\n            window.localStorage.setItem(\"bulk_upload_sampling_freq\", event.target.value);\n        }\n        frequencePanel.appendChild(frequence);\n        // bulk upload sampling frequence ======================================\n        \n        const buttons = document.createElement(\"div\");\n        buttons.style.display = \"flex\";\n        buttons.style.marginTop = \"1.5rem\";\n        buttons.style.justifyContent = \"flex-end\";\n        buttons.style.alignItems = \"center\";\n        buttons.style.columnGap = \"0.5rem\";\n        container.append(buttons)\n        \n        const OKButton = document.createElement(\"button\");\n        OKButton.style.paddingTop = \"0.5rem\";\n        OKButton.style.paddingBottom = \"0.5rem\";\n        OKButton.style.outline = \"none\";\n        OKButton.style.border = \"none\";\n        OKButton.style.paddingLeft = \"1rem\";\n        OKButton.style.paddingRight = \"1rem\";\n        OKButton.style.borderRadius = \"3px\";\n        OKButton.style.backgroundColor = \"#32577e\";\n        OKButton.style.color = \"white\";\n        OKButton.innerText = \"OK\";\n        OKButton.onclick = function(event){\n            document.body.removeChild(selectorDiv);\n            selectorDiv = null;\n            return callback();\n        }\n        buttons.appendChild(OKButton);\n        \n        const cancelButton = document.createElement(\"button\");\n        cancelButton.style.paddingTop = \"0.5rem\";\n        cancelButton.style.paddingBottom = \"0.5rem\";\n        cancelButton.style.outline = \"none\";\n        cancelButton.style.border = \"none\";\n        cancelButton.style.paddingLeft = \"1rem\";\n        cancelButton.style.paddingRight = \"1rem\";\n        cancelButton.style.borderRadius = \"3px\";\n        cancelButton.style.backgroundColor = \"#32577e\";\n        cancelButton.style.color = \"white\";\n        cancelButton.innerText = \"Cancel\";\n        cancelButton.onclick = function(event){\n            document.body.removeChild(selectorDiv);\n            selectorDiv = null;\n        }\n        buttons.appendChild(cancelButton)\n        \n        selectorDiv.appendChild(container);\n    }\n\n    self.ctx.$scope.sendUpdate = function() {\n        loadSensors();\n        selector(function(){\n            if(window.confirm(\"The configuration has been sent to Pebble!\")){\n                entityParameters.data_channel = computeChannel();\n                entityParameters.bulk_upload = window.localStorage.getItem(\"bulk_upload\") === \"true\" ? \"1\" : \"0\";\n                entityParameters.upload_period = Number(window.localStorage.getItem(\"upload_period\")).toString();\n                entityParameters.bulk_upload_sampling_cnt = Number(window.localStorage.getItem(\"bulk_upload_sampling_cnt\")).toString();\n                entityParameters.bulk_upload_sampling_freq = Number(window.localStorage.getItem(\"bulk_upload_sampling_freq\")).toString();\n            }\n            \n            let attributes = [];\n            for (let key in entityParameters) {\n                attributes.push({\n                    \"key\": key,\n                    \"value\": entityParameters[key]\n                });\n            }\n            \n            console.log(attributes);\n            \n            let entityId = {\n                entityType: \"DEVICE\",\n                id: self.ctx.defaultSubscription.targetDeviceId\n            };\n            attributeService.saveEntityAttributes(entityId,\n                entityAttributeType, attributes).subscribe(\n                function success() {\n                    self.ctx.$scope.error = \"\";\n                    self.ctx.detectChanges();\n                },\n                function fail(rejection) {\n                    if (self.ctx.settings.showError) {\n                        self.ctx.$scope.error =\n                            rejection.status + \": \" +\n                            rejection.statusText;\n                            self.ctx.detectChanges();\n                    }\n                }\n    \n            );\n        });\n        document.body.appendChild(selectorDiv);\n    };\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"title\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"buttonText\": {\n                \"title\": \"Button label\",\n                \"type\": \"string\",\n                \"default\": \"Update device attribute\"\n            },\n            \"entityAttributeType\": {\n                \"title\": \"Device attribute scope\",\n                \"type\": \"string\",\n                \"default\": \"SERVER_SCOPE\"\n            },\n            \"entityParameters\": {\n                \"title\": \"Device attribute parameters\",\n                \"type\": \"string\",\n                \"default\": \"{}\"\n            },\n            \"styleButton\": {\n                \"type\": \"object\",\n                \"title\": \"Button Style\",\n                \"properties\": {\n                    \"isRaised\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Raised\",\n                        \"default\": true\n                    },\n                    \"isPrimary\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Primary color\",\n                        \"default\": false\n                    },\n                    \"bgColor\": {\n                        \"type\": \"string\",\n                        \"title\": \"Button background color\",\n                        \"default\": null\n                    },\n                    \"textColor\": {\n                        \"type\": \"string\",\n                        \"title\": \"Button text color\",\n                        \"default\": null\n                    }\n                }\n            },\n            \"required\": []\n        }\n    },\n    \"form\": [\n        \"title\",\n        \"buttonText\",\n        {\n            \"key\": \"entityAttributeType\",\n            \"type\": \"rc-select\",\n            \"multiple\": false,\n            \"items\": [{\n                \"value\": \"SERVER_SCOPE\",\n                \"label\": \"Server attribute\"\n            }, {\n                \"value\": \"SHARED_SCOPE\",\n                \"label\": \"Shared attribute\"\n            }]\n        }, {\n            \"key\": \"entityParameters\",\n            \"type\": \"json\"\n        },\n        {\n            \"key\": \"styleButton\",\n            \"items\": [\n                \"styleButton.isRaised\",\n                \"styleButton.isPrimary\",\n                {\n                    \"key\": \"styleButton.bgColor\",\n                    \"type\": \"color\"\n                },\n                {\n                    \"key\": \"styleButton.textColor\",\n                    \"type\": \"color\"\n                }\n            ]\n        }\n    ]\n\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"#e6e7e8\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"styleButton\":{\"isRaised\":true,\"isPrimary\":false},\"entityParameters\":\"{}\",\"entityAttributeType\":\"SERVER_SCOPE\",\"buttonText\":\"Update device attribute\"},\"title\":\"ConfigMe\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{},\"targetDeviceAliases\":[]}"
      }
    },
    {
      "alias": "beepme",
      "name": "BeepMe",
      "descriptor": {
        "type": "rpc",
        "sizeX": 4,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<div class=\"tb-rpc-button\" fxLayout=\"column\">\n    <div fxFlex=\"20\" class=\"title-container\" fxLayout=\"row\"\n        fxLayoutAlign=\"center center\" [fxShow]=\"showTitle\">\n        <span class=\"button-title\">{{title}}</span>\n    </div>\n    <div fxFlex=\"{{showTitle ? 80 : 100}}\" [ngStyle]=\"{paddingTop: showTitle ? '5px': '10px'}\"\n        class=\"button-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <div>\n            <button mat-button (click)=\"sendUpdate()\"\n                    [class.mat-raised-button]=\"styleButton?.isRaised\"\n                    [color]=\"styleButton?.isPrimary ? 'primary' : ''\"\n                    [ngStyle]=\"customStyle\">\n                {{buttonLable}}\n            </button>\n        </div>\n    </div>\n    <div class=\"error-container\" [ngStyle]=\"{'background': error?.length ? 'rgba(255,255,255,0.25)' : 'none'}\"\n         fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <span class=\"button-error\">{{ error }}</span>\n    </div>\n</div>",
        "templateCss": ".tb-rpc-button {\n    width: 100%;\n    height: 100%;\n}\n\n.tb-rpc-button .title-container {\n    font-weight: 500;\n    white-space: nowrap;\n    margin: 10px 0;\n}\n\n.tb-rpc-button .button-container div{\n    min-width: 80%\n}\n\n.tb-rpc-button .button-container .mat-button{\n    width: 100%;\n    margin: 0;\n}\n\n.tb-rpc-button .error-container {\n    position: absolute;\n    top: 2%;\n    right: 0;\n    left: 0;\n    z-index: 4;\n    height: 14px;\n}\n\n.tb-rpc-button .error-container .button-error {\n    color: #ff3315;\n    white-space: nowrap;\n}",
        "controllerScript": "self.onInit = function() {\n    self.ctx.ngZone.run(function() {\n       init(); \n       self.ctx.detectChanges();\n    });\n};\n\nfunction init() {\n    self.ctx.$scope.buttonLable = self.ctx.settings.buttonText;\n    self.ctx.$scope.showTitle = self.ctx.settings.title &&\n        self.ctx.settings.title.length ? true : false;\n    self.ctx.$scope.title = self.ctx.settings.title;\n    self.ctx.$scope.styleButton = self.ctx.settings.styleButton;\n    let entityAttributeType = self.ctx.settings.entityAttributeType;\n    let entityParameters = JSON.parse(self.ctx.settings.entityParameters);\n    let selectorDiv = null;\n\n    if (self.ctx.settings.styleButton.isPrimary ===\n        false) {\n        self.ctx.$scope.customStyle = {\n            'background-color': self.ctx.$scope.styleButton\n                .bgColor,\n            'color': self.ctx.$scope.styleButton.textColor\n        };\n    }\n\n    let attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n    \n    const selector = function(callback){\n        if(selectorDiv){\n            return selectorDiv.style.visibility = \"visible\";\n        }\n        \n        selectorDiv = document.createElement(\"div\");\n        selectorDiv.style.visibility = \"visible\";\n        selectorDiv.style.visible = \"hidden\";\n        selectorDiv.style.position = \"absolute\";\n        selectorDiv.style.width = \"100vw\";\n        selectorDiv.style.height = \"100vh\";\n        selectorDiv.style.top = 0;\n        selectorDiv.style.left = 0;\n        selectorDiv.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\";\n        selectorDiv.style.zIndex = 10000;\n        selectorDiv.style.display = \"flex\";\n        selectorDiv.style.justifyContent = \"center\";\n        selectorDiv.style.alignItems = \"center\";\n        \n        const container = document.createElement(\"div\");\n        container.style.paddingLeft = \"2rem\";\n        container.style.paddingRight = \"2rem\";\n        container.style.paddingBottom = \"2rem\";\n        container.style.paddingTop = \"1rem\";\n        container.style.borderRadius = \"16px\";\n        container.style.minWidth = \"300px\";\n        container.style.backgroundColor = \"white\";\n        container.style.boxShadow = \"0px 10px 50px rgba(0,0,0,0.3)\";\n        \n        const title = document.createElement(\"h5\");\n        title.innerText = \"Set Beep Duration\";\n        title.style.marginBottom = \"1rem\";\n        container.appendChild(title);\n        \n        const mainView = document.createElement(\"div\");\n        mainView.style.marginTop = \"2rem\";\n        mainView.style.marginBottom = \"2rem\";\n        mainView.style.display = \"flex\";\n        mainView.style.justifyContent = \"center\";\n        mainView.style.alignItems = \"center\";\n        container.appendChild(mainView);\n        \n        const spanLabel = document.createElement(\"div\");\n        spanLabel.innerText=\"Beep Duration(ms):\";\n        mainView.appendChild(spanLabel);\n        \n        const spanInput = document.createElement(\"input\");\n        spanInput.type = \"number\";\n        spanInput.id = \"spanInput\";\n        spanInput.defaultValue = 2000;\n        mainView.appendChild(spanInput);\n        \n        const buttons = document.createElement(\"div\");\n        buttons.style.display = \"flex\";\n        buttons.style.justifyContent = \"flex-end\";\n        buttons.style.alignItems = \"center\";\n        buttons.style.columnGap = \"0.5rem\";\n        container.append(buttons)\n        \n        const OKButton = document.createElement(\"button\");\n        OKButton.innerText = \"OK\";\n        OKButton.style.paddingTop = \"0.5rem\";\n        OKButton.style.paddingBottom = \"0.5rem\";\n        OKButton.style.outline = \"none\";\n        OKButton.style.border = \"none\";\n        OKButton.style.paddingLeft = \"1rem\";\n        OKButton.style.paddingRight = \"1rem\";\n        OKButton.style.borderRadius = \"3px\";\n        OKButton.style.backgroundColor = \"#32577e\";\n        OKButton.style.color = \"white\";\n        OKButton.onclick = function(event){\n            selectorDiv.style.visibility = \"hidden\";\n            return callback();\n        }\n        buttons.appendChild(OKButton);\n        \n        const cancelButton = document.createElement(\"button\");\n        cancelButton.style.padding = \"0.5rem\";\n        cancelButton.style.outline = \"none\";\n        cancelButton.style.border = \"none\";\n        cancelButton.style.paddingLeft = \"1rem\";\n        cancelButton.style.paddingRight = \"1rem\";\n        cancelButton.style.borderRadius = \"3px\";\n        cancelButton.style.backgroundColor = \"#32577e\";\n        cancelButton.style.color = \"white\";\n        cancelButton.innerText = \"Cancel\";\n        cancelButton.onclick = function(event){\n            selectorDiv.style.visibility = \"hidden\";\n        }\n        buttons.appendChild(cancelButton)\n        \n        selectorDiv.appendChild(container);\n    }\n\n    self.ctx.$scope.sendUpdate = function() {\n        selector(function(){\n            let tempValue = \"\";\n            let useNew = false;\n            if(window.confirm(\"The configuration has been sent to Pebble!\")){\n                useNew = true;\n            }\n            \n            let attributes = [];\n            for (let key in entityParameters) {\n                if(key === \"beep\" && useNew){\n                    tempValue = document.getElementById(\"spanInput\").value.toString()\n                }else{\n                    tempValue = keyentityParameters[key]\n                }\n                \n                attributes.push({\n                    \"key\": key,\n                    \"value\": tempValue\n                });\n            }\n            \n            console.log(attributes);\n            \n            let entityId = {\n                entityType: \"DEVICE\",\n                id: self.ctx.defaultSubscription.targetDeviceId\n            };\n            attributeService.saveEntityAttributes(entityId,\n                entityAttributeType, attributes).subscribe(\n                function success() {\n                    self.ctx.$scope.error = \"\";\n                    self.ctx.detectChanges();\n                },\n                function fail(rejection) {\n                    if (self.ctx.settings.showError) {\n                        self.ctx.$scope.error =\n                            rejection.status + \": \" +\n                            rejection.statusText;\n                            self.ctx.detectChanges();\n                    }\n                }\n    \n            );\n        });\n        document.body.appendChild(selectorDiv);\n    };\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"title\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"buttonText\": {\n                \"title\": \"Button label\",\n                \"type\": \"string\",\n                \"default\": \"Update device attribute\"\n            },\n            \"entityAttributeType\": {\n                \"title\": \"Device attribute scope\",\n                \"type\": \"string\",\n                \"default\": \"SERVER_SCOPE\"\n            },\n            \"entityParameters\": {\n                \"title\": \"Device attribute parameters\",\n                \"type\": \"string\",\n                \"default\": \"{}\"\n            },\n            \"styleButton\": {\n                \"type\": \"object\",\n                \"title\": \"Button Style\",\n                \"properties\": {\n                    \"isRaised\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Raised\",\n                        \"default\": true\n                    },\n                    \"isPrimary\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Primary color\",\n                        \"default\": false\n                    },\n                    \"bgColor\": {\n                        \"type\": \"string\",\n                        \"title\": \"Button background color\",\n                        \"default\": null\n                    },\n                    \"textColor\": {\n                        \"type\": \"string\",\n                        \"title\": \"Button text color\",\n                        \"default\": null\n                    }\n                }\n            },\n            \"required\": []\n        }\n    },\n    \"form\": [\n        \"title\",\n        \"buttonText\",\n        {\n            \"key\": \"entityAttributeType\",\n            \"type\": \"rc-select\",\n            \"multiple\": false,\n            \"items\": [{\n                \"value\": \"SERVER_SCOPE\",\n                \"label\": \"Server attribute\"\n            }, {\n                \"value\": \"SHARED_SCOPE\",\n                \"label\": \"Shared attribute\"\n            }]\n        }, {\n            \"key\": \"entityParameters\",\n            \"type\": \"json\"\n        },\n        {\n            \"key\": \"styleButton\",\n            \"items\": [\n                \"styleButton.isRaised\",\n                \"styleButton.isPrimary\",\n                {\n                    \"key\": \"styleButton.bgColor\",\n                    \"type\": \"color\"\n                },\n                {\n                    \"key\": \"styleButton.textColor\",\n                    \"type\": \"color\"\n                }\n            ]\n        }\n    ]\n\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"showTitle\":false,\"backgroundColor\":\"#e6e7e8\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"styleButton\":{\"isRaised\":true,\"isPrimary\":false},\"entityParameters\":\"{}\",\"entityAttributeType\":\"SERVER_SCOPE\",\"buttonText\":\"Update device attribute\"},\"title\":\"BeepMe\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{},\"targetDeviceAliases\":[]}"
      }
    }
  ]
}